/* Expected results from the fact list below
  ((lanceSys decetherworksturbo non exclusive 100) 
   (lanceSys decetherworksturbo non exclusive 100) 
   
   (ubnb streams exclusive non 100) 
   (ubnb streams exclusive non 100) 
   
   (mcsxns streams exclusive non 100) 
   (mcsxns streams exclusive non 100) 
   
   (nbf lanceSys non non 100) 
   (nbf lanceSys non non 100) 
   
   (netbios ubnb non non 100) 
   (netbios nbf non non 100) 
   
   (netbios ubnb non non 100) 
   (netbios nbf non non 100) 
   
   (srv ubnb non non 100) 
   (srv nbf non non 100) 
   
   (srv ubnb non non 100) 
   (srv nbf non non 100) 
   
   (streams lanceSys non non 100) 
   (streams lanceSys non non 100) 
   
   (wksta ubnb non non 100) 
   (wksta nbf non non 100) 
   
   (wksta ubnb non non 100) 
   (wksta nbf non non 100) 
   
   (lanceSys decetherworksturbo non exclusive 100) 
   (lanceSys decetherworksturbo non exclusive 100) 
   
   (ubnb streams exclusive non 100) 
   (ubnb streams exclusive non 100) 
   
   (mcsxns streams exclusive non 100) 
   (mcsxns streams exclusive non 100)
   
   (nbf lanceSys non non 100) 
   (nbf lanceSys non non 100) 
   
   (netbios ubnb non non 100)
   (netbios nbf non non 100) 
   
   (netbios ubnb non non 100) 
   (netbios nbf non non 100)
   
   (srv ubnb non non 100) 
   (srv nbf non non 100) 
   
   (srv ubnb non non 100) 
   (srv nbf non non 100) 
   
   (streams lanceSys non non 100)
   (streams lanceSys non non 100) 
   
   (wksta ubnb non non 100) 
   (wksta nbf non non 100) 
   
   (wksta ubnb non non 100) 
   (wksta nbf non non 100))
 */

/*  Return a list of ordered pairs of bindable components  
 */
( (getbindings List)
  (findall L (bindpair X Y L) List))

/*  Succeed once for each bindable pair: lower -> upper  
 */
( (bindpair Dev1 Dev2 (Dev1 Dev2 Excl1 Excl2 Value))
  (ifpresent lower Dev1 Type1 _ _)
  (ifpresent upper Dev2 Type2 _ _)
  (not (eq Dev1 Dev2))
  (canbind Type1 Type2 Excl1 Excl2 Value))

/*  Succeed if a common "bindable" rule is inherited by the
 *	lower layer of X and the upper layer of Y.  
 */
( (canbind X Y Xexcl Yexcl Value)
  (iflower X Lower)
  (ifupper Y Upper)
  (bindable Blower Bupper Xexcl Yexcl Value)
  (devDerived Lower Blower)
  (devDerived Upper Bupper))



/* Determine if a device class is a sub-class of another 
 *  (devDerived SubClass BaseClass)
 */
( (devDerived X basic)
  (cut))
( (devDerived X X)
  (cut))
( (devDerived X Y)
  (devClass X Y _)
  (cut))
( (devDerived X Y)
  (devClass X Z _)
  (devDerived Z Y))

/*  ifupper/2: return the class of a device's upper interface
 *  (ifupper Devname Classname)
 */
( (ifupper Ifname Ifclass)
  (devType Ifname _ Ifclass _))

/*  iflower/2: return the class of a device's lower interface
 *  (iflower Devname Classname)
 */
( (iflower Ifname Ifclass)
  (devType Ifname Usage _ Ifclass) 
/* Adapters cannot connect to anything 
 */
  (not (eq Usage adapter)))



/* ifpresent/5: validate the presence of an interface.
 * devTypes have upper and lower interface; devIfs only
 * have an upper interface.
 * (ifpresent Layer Device Type Owner Objectname)
 */
( (ifpresent _ Dev Type Type Objname)
  (present Dev Type Objname _))
( (ifpresent upper Dev Dev Owner Objname)
  (devIf Owner Dev _ Objname _)
  (present Owner _ _ _))
( (ifpresent _ Dev Type Type Objname)
  (present Dev Type Objname _))
( (ifpresent upper Dev Dev Owner Objname)
  (devIf Owner Dev _ Objname _)
  (present Owner _ _ _))
  
(devClass ndisDriver basic no)
(devClass ndisTransport basic no)
(devClass netBiosTransport ndisTransport no)
(devClass lmNetService basic no)
(bindable ndisTransport ndisDriver non non 100)
(bindable lmNetService netBiosTransport non non 100)
(devType decetherworksturbo adapter decetherworksturboAdapter
    decetherworksturboAdapter)
(devBind decetherworksturbo "Lance1" yes yes container)
(devClass decetherworksturboAdapter basic no)
(present decetherworksturbo decetherworksturbo "Lance1"
    "Machine\SOFTWARE\Microsoft\Windows NT\NetworkCards\1")
(devType lanceSys driver ndisDriver lanceDriver)
(devBind lanceSys "LanceSys" yes no container)
(devClass lanceDriver basic no)
(bindable lanceDriver dec100Adapter non exclusive 100)
(bindable lanceDriver dec101Adapter non exclusive 100)
(bindable lanceDriver decetherworksturboAdapter non exclusive 100)
(bindable lanceDriver dec422Adapter non exclusive 100)
(bindable lanceDriver decpcAdapter non exclusive 100)
(bindable lanceDriver decstatAdapter non exclusive 100)
(present lanceSys lanceSys "LanceSys" "Machine\SOFTWARE\Microsoft\Lance")
(devType ubnb transport ubnbNbTransport streamsStack)
(devBind ubnb "Ubnb" yes yes container)
(devClass ubnbNbTransport netBiosTransport yes)
(present ubnb ubnb "Ubnb" "Machine\SOFTWARE\Microsoft\Ubnb")
(devType mcsxns transport mcsxnsTransport streamsStack)
(devBind mcsxns "McsXns" yes yes container)
(devClass mcsxnsTransport basic yes)
(present mcsxns mcsxns "McsXns" "Machine\SOFTWARE\Microsoft\McsXns")
(devType nbf transport netBiosTransport rasCapableTransport)
(devBind nbf "Nbf" yes yes simple)
(devClass rasCapableTransport netBiosTransport no)
(present nbf nbf "Nbf" "Machine\SOFTWARE\Microsoft\Nbf")
(devType netbios service lmNetService lmNetService)
(devBind netbios "Netbios" yes yes container)
(present netbios netbios "Netbios" "Machine\SOFTWARE\Microsoft\NetBIOS")
(devType srv service lmNetService lanmanServer)
(devBind srv "LanmanServer" yes yes container)
(devClass lanmanServer lmNetService no)
(present srv srv "LanmanServer" "Machine\SOFTWARE\Microsoft\LanmanServer")
(devType streams transport streamsEnvironment streamsEnvironment)
(devBind streams "Streams" yes yes streams)
(devClass streamsEnvironment basic no)
(devClass streamsStack basic no)
(bindable streamsEnvironment ndisDriver non non 100)
(bindable streamsStack streamsEnvironment exclusive non 100)
(present streams streams "Streams" "Machine\SOFTWARE\Microsoft\Streams")
(devType wksta service lmNetService lanmanWorkstation)
(devBind wksta "LanmanWorkstation" yes yes container)
(devClass lanmanWorkstation lmNetService no)
(present wksta wksta "LanmanWorkstation"
    "Machine\SOFTWARE\Microsoft\LanmanWorkstation")